    # Advanced configuration START
    set $internal_error_message "NGINX / OIDC login failure\n";
    set $pkce_id "";
    resolver 8.8.8.8; # For DNS lookup of IdP endpoints;
    subrequest_output_buffer_size 32k; # To fit a complete tokenset response
    gunzip on; # Decompress IdP responses if necessary
    # Advanced configuration END

    location = /_jwks_uri {
        internal;
        proxy_cache jwk;                              # Cache the JWK Set recieved from IdP
        proxy_cache_valid 200 12h;                    # How long to consider keys "fresh"
        proxy_cache_use_stale error timeout updating; # Use old JWK Set if cannot reach IdP
        proxy_ssl_server_name on;                     # For SNI to the IdP
        proxy_method GET;                             # In case client request was non-GET
        proxy_set_header Content-Length "";           # ''
        proxy_pass $oidc_jwt_keyfile;                 # Expecting to find a URI here
        proxy_ignore_headers Cache-Control Expires Set-Cookie; # Does not influence caching
    }

    location @do_oidc_flow {
        status_zone "OIDC start";
        js_content oidc.auth;
        default_type text/plain; # In case we throw an error
    }

    set $redir_location "/_codexch";
    location = /_codexch {
        # This location is called by the IdP after successful authentication
        status_zone "OIDC code exchange";
        js_content oidc.codeExchange;
        error_page 500 502 504 @oidc_error; 
    }
   
    location = /_token {
        # This location is called by oidc.codeExchange(). We use the proxy_ 
        # directives to construct the OIDC token request, as per:
        #  http://openid.net/specs/openid-connect-core-1_0.html#TokenRequest
        internal;
        proxy_ssl_server_name on; # For SNI to the IdP
        proxy_set_header      Content-Type "application/x-www-form-urlencoded";
        proxy_set_body        "grant_type=authorization_code&client_id=$oidc_client&$args&redirect_uri=$redirect_base$redir_location";
        proxy_method          POST;
        proxy_pass            $oidc_token_endpoint;
    }

    location = /_refresh {
        # This location is called by oidc.auth() when performing a token refresh.
        # We use the proxy_ directives to construct the OIDC token request, as per:
        #  https://openid.net/specs/openid-connect-core-1_0.html#RefreshingAccessToken
        internal;
        proxy_ssl_server_name on; # For SNI to the IdP
        proxy_set_header      Content-Type "application/x-www-form-urlencoded";
        proxy_set_body        "grant_type=refresh_token&refresh_token=$arg_token&client_id=$oidc_client&client_secret=$oidc_client_secret";
        proxy_method          POST;
        proxy_pass            $oidc_token_endpoint;
    }

    location = /_id_token_validation {
        # This location is called by oidcCodeExchange() and oidcRefreshRequest(). We use
        # the auth_jwt_module to validate the OIDC token response, as per:
        #  https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation
        internal;
        auth_jwt "" token=$arg_token;
        js_content oidc.validateIdToken;
        error_page 500 502 504 @oidc_error;
    }

    location = /_access_token_validation {
        # This location is called by oidcCodeExchange() and oidcRefreshRequest(). We use
        # the auth_jwt_module to validate the OIDC token response, as per:
        #  https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowTokenValidation
        internal;
        auth_jwt "" token=$arg_token;
        js_content oidc.validateAccessToken;
        error_page 500 502 504 @oidc_error;
    }

    # Retrieve user information w/ cookie + bearer access token
    #
    # Reponse Example 1 (Amazon Cognito):
    # {
    #     "sub"     : "bbd06af9-9516-48c4-aa23-5898df7ed990",
    #     "email"   : "user-01@nginx.com",
    #     "username": "user-01"
    # }
    #
    # Reponse Example 2 (OneLogin):
    # {
    #     "sub"               : "149767934",
    #     "email"             : "user-02@nginx.com",
    #     "name"              : "Super Man",
    #     "updated_at"        : 1632264185,
    #     "given_name"        : "Super",
    #     "family_name"       : "Man"
    # }
    #
    location = /userinfo {
        status_zone "OIDC userinfo";
        auth_jwt "" token=$access_token;
        auth_jwt_key_request /_jwks_uri;
        proxy_set_header Authorization "Bearer $access_token";
        proxy_pass       $oidc_userinfo_endpoint;
    }

    location = /login {
        # This site is protected with OpenID Connect
        auth_jwt "" token=$session_jwt;
        error_page 401 = @do_oidc_flow;

        #auth_jwt_key_file $oidc_jwt_keyfile;   # Enable when using filename
        auth_jwt_key_request /_jwks_uri;        # Enable when using URL

        # Successfully authenticated users are proxied to the frontend site,
        # with bearer token passed as HTTP header
        proxy_set_header Authorization "Bearer $access_token";
        proxy_set_header HOST $host;
        proxy_pass http://my_frontend_site;

        access_log /var/log/nginx/access.log main_jwt;
    }

    location = /logout {
        status_zone "OIDC logout";
        add_header Set-Cookie "auth_token=; $oidc_cookie_flags"; # Send empty cookie
        add_header Set-Cookie "auth_redir=; $oidc_cookie_flags"; # Erase original cookie
        js_content oidc.logout;
    }

    location = /_logout {
        # Reference Sample 1:
        #   This location is the default value of $oidc_logout_redirect
        #   in case it wasn't configured.
        #
        # default_type text/plain;
        # return 200 "Logged out\n";

        # Reference Sample 2:
        #   This proxy is a sample logout page.
        proxy_pass http://my_frontend_site/logout;
    }

    location @oidc_error {
        # This location is called when oidc.auth() or oidc.codeExchange() returns an error
        status_zone "OIDC error";
        default_type text/plain;
        return 500 $internal_error_message;
    }

    location /api/ {
        api write=on;
        # Uncomment to further restrict write permissions; see note above
        # allow 127.0.0.1; # Only the NGINX host may call the NIGNX Plus API
        # deny all;
        # access_log off;
    }

# vim: syntax=nginx